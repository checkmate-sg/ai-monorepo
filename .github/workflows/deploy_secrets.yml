name: Deploy CF Secrets
# Trigger the workflow on pushes to staging/main branches when worker code changes
# or manually via workflow_dispatch with optional parameters
on:
  workflow_dispatch:
    inputs:
      force_deploy:
        description: Force deploy all workers secrets
        required: false
        default: false
        type: boolean
      specific_worker:
        description: Deploy a specific worker secrets (leave empty for automatic detection)
        required: false
        type: string
# Set all the neccessary secrets in Github
env:
  AGENT_SECRET_NAMES: AGENT_CF_ACCESS_CLIENT_ID,AGENT_CF_ACCESS_CLIENT_SECRET,ENVIRONMENT,PORTKEY_ENDPOINT,OPENAI_API_KEY,GROQ_API_KEY,AGENT_GOOGLE_CLIENT_ID,AGENT_GOOGLE_CLIENT_SECRET,VERTEX_PROJECT_ID,VERTEX_REGION,LANGFUSE_SECRET_KEY,LANGFUSE_PUBLIC_KEY,LANGFUSE_HOST
  API_ENTRYPOINT_SECRET_NAMES: ENVIRONMENT
  EMBEDDER_SECRET_NAMES: ENVIRONMENT
  SCREENSHOT_SECRET_NAMES: SCREENSHOT_API_DOMAIN,ENVIRONMENT
  SEARCH_SECRET_NAMES: SERPER_API_KEY,ENVIRONMENT
  URLSCAN_SECRET_NAMES: URLSCAN_HOSTNAME,URLSCAN_APIKEY,ENVIRONMENT
  SCREENSHOT_BACKUP_SECRET_NAMES: SCREENSHOT_BACKUP_GOOGLE_CLIENT_ID,SCREENSHOT_BACKUP_GOOGLE_CLIENT_SECRET,SCREENSHOT_BACKUP_API_ENDPOINT,ENVIRONMENT
  TRIVIALFILTER_SECRET_NAMES: TRIVIALFILTER_CF_ACCESS_CLIENT_ID,TRIVIALFILTER_CF_ACCESS_CLIENT_SECRET,PORTKEY_ENDPOINT,OPENAI_API_KEY,GROQ_API_KEY,LANGFUSE_SECRET_KEY,LANGFUSE_PUBLIC_KEY,LANGFUSE_HOST,ENVIRONMENT

jobs:
  process-secrets:
      name: Process secrets
      runs-on: ubuntu-latest
      outputs:
        worker-dirs: ${{ steps.changed-workers.outputs.worker-dirs }} # Output the list of workers to deploy
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0 # Full git history needed to detect changes

        - name: Determine changed workers
          id: changed-workers
          run: |
            # Define all worker directories
            ALL_WORKER_DIRS='["agent-service", "api-entrypoint", "embedder-service", "screenshot-service", "search-service", "urlscan-service", "screenshot-backup-service", "trivialfilter-service","debug-service"]'

            # Case 1: Manual trigger with force_deploy=true - deploy all workers secrets
            if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
              echo "Force deploying all workers"
              WORKER_DIRS="$ALL_WORKER_DIRS"

            # Case 2: Manual trigger with specific worker - deploy only that worker secret
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.specific_worker }}" ]]; then
              echo "Deploying specific worker: ${{ github.event.inputs.specific_worker }}"
              WORKER_DIRS="[\"${{ github.event.inputs.specific_worker }}\"]"

            # Default case: deploy all workers
            else
              echo "No specific criteria met, deploying all workers"
              WORKER_DIRS="$ALL_WORKER_DIRS"
            fi

            # Set output variable and log results
            echo "worker-dirs=$WORKER_DIRS" >> $GITHUB_OUTPUT
            echo "Changed worker directories: $WORKER_DIRS"

  deploy-secrets:
    name: "Deploy worker secrets to ${{  github.ref_name == 'main' && 'production' || github.ref_name }} (${{ matrix.worker-dir }})"
    needs: process-secrets
    if: "${{ needs.process-secrets.outputs.worker-dirs != '[]' }}"
    runs-on: ubuntu-latest
    environment: "${{  github.ref_name == 'main' && 'production' || github.ref_name }}"
    strategy:
      matrix:
        # Create a job for each worker service
        worker-dir:
          - agent-service
          - api-entrypoint
          - embedder-service
          - screenshot-service
          - search-service
          - urlscan-service
          - screenshot-backup-service
          - trivialfilter-service
    timeout-minutes: 60 # Set timeout to prevent hung deployments
    steps:
      - uses: actions/checkout@v4.2.2

      - uses: oNaiPs/secrets-to-env-action@v1
        with:
          secrets: ${{ toJSON(secrets) }}

      - uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.5.2

      - name: Check which services require secret updates
        id: check-changes
        run: |
          CHANGED_WORKERS='${{ needs.process-secrets.outputs.worker-dirs }}'
          if echo $CHANGED_WORKERS | jq -e 'contains(["${{ matrix.worker-dir }}"])' > /dev/null; then
            echo "Worker ${{ matrix.worker-dir }} has changes, will deploy"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Worker ${{ matrix.worker-dir }} has no changes, skipping deployment"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy Secrets with Wrangler CLI
        if: "steps.check-changes.outputs.has_changes == 'true'"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |-
          cd ./workers/${{ matrix.worker-dir }}
          ENV_NAME="${{ github.ref_name == 'main' && 'production' || github.ref_name }}"

          # Install dependencies
          pnpm install
      
          # Get the appropriate secret names for this worker
          SECRET_NAMES=""
          case "${{ matrix.worker-dir }}" in
            agent-service)
              SECRET_NAMES="${{ env.AGENT_SECRET_NAMES }}"
              ;;
            api-entrypoint)
              SECRET_NAMES="${{ env.API_ENTRYPOINT_SECRET_NAMES }}"
              ;;
            embedder-service)
              SECRET_NAMES="${{ env.EMBEDDER_SECRET_NAMES }}"
              ;;
            screenshot-service)
              SECRET_NAMES="${{ env.SCREENSHOT_SECRET_NAMES }}"
              ;;
            search-service)
              SECRET_NAMES="${{ env.SEARCH_SECRET_NAMES }}"
              ;;
            urlscan-service)
              SECRET_NAMES="${{ env.URLSCAN_SECRET_NAMES }}"
              ;;
            screenshot-backup-service)
              SECRET_NAMES="${{ env.SCREENSHOT_BACKUP_SECRET_NAMES }}"
              ;;
            trivialfilter-service)
              SECRET_NAMES="${{ env.TRIVIALFILTER_SECRET_NAMES }}"
              ;;
          esac

          # Loop through each secret and set it
          for NAME in $(echo "$SECRET_NAMES" | tr ',' '\n' | tr -d ' '); do
            if [ -n "$NAME" ]; then
              # Get the value of the secret
              VALUE=$(eval echo \$$NAME)
              
              # Skip if the secret has no value
              if [ -z "$VALUE" ]; then
                echo "Warning: Secret $NAME has no value"
                continue
              fi
              
              # Determine if this is a prefixed secret that needs to be stripped
              WORKER_DIR="${{ matrix.worker-dir }}"
              WORKER_DIR=${WORKER_DIR//-/_}  # Replace hyphens with underscores
              SERVICE_PREFIX=$(echo "${WORKER_DIR}" | sed 's/_service$//')
              SERVICE_PREFIX_UPPER=$(echo "${SERVICE_PREFIX}" | tr '[:lower:]' '[:upper:]')
              
              if [[ "$NAME" == "${SERVICE_PREFIX_UPPER}_"* ]]; then
                # Extract the actual secret name without the prefix
                ACTUAL_NAME=${NAME#"${SERVICE_PREFIX_UPPER}_"}
                echo "Setting secret: $ACTUAL_NAME (from $NAME)"
                echo "$VALUE" | npx wrangler secret put "$ACTUAL_NAME" --env $ENV_NAME
              else
                # Regular secret (no prefix to strip)
                echo "Setting secret: $NAME"
                echo "$VALUE" | npx wrangler secret put "$NAME" --env $ENV_NAME
              fi
            fi
          done
